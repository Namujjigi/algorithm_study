package BaekJun;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;

public class SafePrincess {
	static int N,M,T;
	static int[] dx = {1,-1,0,0};
	static int[] dy = {0,0,1,-1};
	static int[][] map,visit,visit2;
	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		String[] s = br.readLine().split(" ");
		N = Integer.parseInt(s[0]);
		M =Integer.parseInt(s[1]);
		T = Integer.parseInt(s[2]);
		map = new int[N][M];
		visit = new int[N][M];
		visit2 = new int[N][M];
		for(int i=0;i<N;i++)
		{
			s = br.readLine().split(" ");
			for(int j=0;j<M;j++)
			{
				map[i][j] = Integer.parseInt(s[j]);
			}
		}
		
		bfs();

	}
	private static void bfs() {
		Queue<int[]> q = new LinkedList();
		q.add(new int[] {0,0,0,0});
		while(true)
		{
			if(q.isEmpty())
			{
				System.out.println("Fail");
				break;
			}
			int x = q.peek()[0];
			int y = q.peek()[1];
			int gram = q.peek()[2];
			int cnt = q.peek()[3];
			q.poll();
			if(x==N-1 && y == M-1)
			{
				if(cnt<=T)
					System.out.println(cnt);
				else
					System.out.println("Fail");
				break;
			}
			if(map[x][y]==2)
			{
				gram =1;
			}
			
			for(int i=0;i<4;i++)
			{
				int ax = x + dx[i];
				int ay = y + dy[i];
				if(ax>=0 && ax<N && ay>=0 && ay<M)
				{
					if(visit[ax][ay]==0 && map[ax][ay] !=1)
					{
						visit[ax][ay]=1;
						q.add(new int[] {ax,ay,gram,cnt+1});
					}
					else if(visit2[ax][ay]==0 && gram==1)
					{
						visit2[ax][ay]=1;
						q.add(new int[] {ax,ay,gram,cnt+1});
					}
				}
			}
		}	
	}
}
